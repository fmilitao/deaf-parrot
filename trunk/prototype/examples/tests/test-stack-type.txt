//OK Function Value
//OK !forall T.(!([] -o exists E.exists NE.(![push: !((T :: (E (+) NE)) -o (![] :: NE)),del: !(([] :: E) -o ![]),isEmpty: !(([] :: (E (+) NE)) -o (Empty#(![] :: E)+NonEmpty#(![] :: NE))),pop: !(([] :: NE) -o (T :: (E (+) NE)))] :: E))


typedef EMPT<p> = rw p !(E#[])
typedef ELEM<T,p> = rw p (N#[T,exists q.( (!ref q) :: ( EMPT[q] (+) ELEM[T,q] ) )] )

typedef AUX<E,NE> = ![
	pop : [] :: NE -o int :: ( E (+) NE ),
	isEmpty : [] :: ( NE (+) E ) -o Empty#([]::E) + NonEmpty#([]::NE) ]

let newStack = <T>fun( __ : [] ).
	open <h,head> = new E#{} in
		<EMPT[h]:E,	// Empty Stack
		<ELEM[T,h]:NE, // NonEmpty Stack
		{
		
			push = fun( e : T :: ( EMPT[h] (+) ELEM[T,h] ) ).
				use h in 
					open <n,next> = new !head in
						head := N#{ e , <n,next::(EMPT[n] (+) ELEM[T,n])> }
					end
				end,

	
			del = fun( _ : [] :: (EMPT[h]) ).
				( delete head ; {} ),			
			
			isEmpty = fun( _ : [] :: ( EMPT[h] (+) ELEM[T,h] ) ).
				use h in // opens alternative
					case !head of
						E#v ->
							head := E#v;
							Empty#({}::(EMPT[h]))
					|	N#n ->
							head := N#n;
							NonEmpty#({}::(ELEM[T,h]))
					end
				end,				

			pop = fun( _ : [] :: ( ELEM[T,h] ) ).
				case !head of
					N#a ->
						let [e,n] = a in
							open <t,ptr> = n in
								use t in
									head := !ptr;
									delete ptr
								end;
								e
							end
						end
				end

		} :: rw h !(E#[]) >>
	end
	
	in
	newStack
end
