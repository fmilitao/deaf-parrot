//OK {0,Function Value,Function Value,Function Value,Function Value}
//OK [exists A.A,!(Rec0 -o exists R.(test#Rec0+fail#int)),!(Rec1 -o exists YY.(a#Rec1+b#int)),!(Rec3 -o (Meh#exists R.R+Number#!int)),!(Rec4 -o exists TT.TT)]

typedef Rec0 = test#Rec0 + fail#int
typedef Rec1 = a#Rec1 + b#int
typedef Rec2 = a#Rec2 + b#int
typedef Rec3 = case1#Rec3 + case2#int
typedef Rec4 = l#Rec4 + q#int

{

// hides int, then hides abstraction
// RESULT: exists A.(A)
< exists I.!I :A, <int:I,0> >,

// this should fail to replace anything otherwise it could not yield
// a proper sum type (cf. substitution lemma)
// RESULT: !((test#Rec0+fail#int) -o exists R.(test#Rec0+fail#int))
fun( x : Rec0 ).(
	<(test#Rec0):R,x>
),

// replaces everything, note that type definitions are checked nominally, not
// structurally, which means that Rec1 != Rec2
// RESULT: !((a#Rec1+b#int) -o exists YY.(a#Rec1+b#int))
fun( x : Rec1 ).(
	<Rec2:YY,x>
),



// RESULT: !(Rec3 -o (Meh#exists R.R+Number#!int))
fun( x : Rec3 ).(
	case x of
	  case1#n -> Meh#<Rec3:R,n>
	| case2#n -> Number#n
	end
),

// RESULT: !(Rec4 -o exists TT.(TT))
fun( y : Rec4 ). <l#Rec4+q#int:TT,y>

}
