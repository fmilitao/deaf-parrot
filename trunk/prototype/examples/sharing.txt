
import add

// useful states
typedef H<t> = rw t (Held#[])
typedef F<t> = rw t (Free#int)

// sharing protocol
typedef Alias<t> = ( (H[t]) => (F[t]) ) (+) ( (F[t]) => none )

open <t,x> = new Held#{} in
	share (H[t]) as (Alias[t]) || (Alias[t]);
	
	// one alias can move to some other context
	// for instance, masking the other alias' type
	open <Unknown,_> =
		let outside = fun( _ : [] :: (Alias[t])).
			(<(Alias[t]):U,{}::(Alias[t])>) in
				outside({})
		end
		in
	
	// so that the relation between locations is
	// no longer statically known.
	// manually open alternative:
	@t (
		focus (H[t]), (F[t]);
		case !x of
			Held#n ->
				x := Free#42;
				defocus // returns unit
		| Free#n ->
				defocus;
				x := (add n 1);
				// ... free to do whatever it pleases
				delete x;
				{} // also return unit to safely merge
		end )

	end
end
