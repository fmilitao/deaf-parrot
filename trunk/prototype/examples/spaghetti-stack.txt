//FIXME: work in progress

typedef Nil   <p> = rw p (Nil#[])
typedef NilP  <p> = Nil[p] => Nil[p] ; NilP[p]
typedef Node  <p> = rw p (Node#[int,exists q.( ref q :: ( NilP[q] (+) NodeP[q] ) )])
typedef NodeP <p> = Node[p] => Node[p] ; NodeP[p]

let newSpaghetti = fun( _ : [] ).
 // the following is a private function that is not visible to clients
 let make = fun( up : exists q.(ref q :: ( NodeP[q] (+) NilP[q] )) ).
 // FIXME: needs to be recursive function
 // FIXME: needs to pack types to be prettier
  open<h,head> = new up in
   {

    push = fun( i : int :: rw h (exists q.(ref q :: ( NodeP[q] (+) NilP[q] ))) ).
		open <t,n> = new Node#{i,!head} in
			// it is always possible to share a node alone
			share Node[t] as (NodeP[t]) || none;
			// restores same head type as in argument
			head := < t, n :: ( NodeP[t] (+) NilP[t] ) >
		end,

    pop = fun( _ : [] :: rw h (exists q.(ref q :: ( NodeP[q] (+) NilP[q] ) )) ).
		open <t,n> = !head in
			@t (
			focus (Node[t]), (Nil[t]);
			case !n of
				Nil#x ->
					n := Nil#x;
					defocus;
					head := < t, n :: ( NodeP[t] (+) NilP[t] ) > ;
					End#{}
			| Node#n ->
					let [e,m] = n in
					// following open is necessary only to disambiguate what is shared
					open <tt,nn> = m in
						@tt (
						focus (Node[tt]), (Nil[tt]);
						case !nn of
						Node#x ->
							nn := Node#x;
							defocus;
							share (NodeP[tt]) as (NodeP[tt]) || (NodeP[tt]);
							head := <tt,nn :: ( NodeP[tt] (+) NilP[tt] )>
						| Nil#y ->
							nn := Nil#y;
							defocus;
//FIXME: bug when defocusing nested focus blocks.
							share (NilP[tt]) as (NilP[tt]) || (NilP[tt]);
							head := < tt, nn :: ( NodeP[tt] (+) NilP[tt] ) >
						end;
						n := Node#{e,< tt, nn :: ( NodeP[tt] (+) NilP[tt] ) >};
						defocus )
					end;
					Result#e
					end
			end )
		end,
		
	clone = fun( _ : [] :: rw h ( exists q.( ref q :: ((NodeP[q]) (+) (NilP[q])) ) ) ).
		open <t,n> = !head in
			@t (
			focus (Node[t]), (Nil[t]);
			case !n of
				Node#x ->
					n := Node#x;
					defocus;
					share (NodeP[t]) as (NodeP[t]) || (NodeP[t]);
					make < t, n :: ( (NodeP[t]) (+) (NilP[t]) ) >;
					head := < t, n :: ( (NodeP[t]) (+) (NilP[t]) )>
			| Nil#y ->
					n := Nil#y;
					defocus;
					share (NilP[t]) as (NilP[t]) || (NilP[t]);
					make < t, n :: ( (NodeP[t]) (+) (NilP[t]) ) >;
					head := < t, n :: ( (NodeP[t]) (+) (NilP[t]) ) >
			end )
		end

	}
	end
	in
		// creates an empty stack (nil up)
		make Nil#{}
	end
	
	// client code
	in
	newSpaghetti
end