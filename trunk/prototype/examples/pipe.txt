// Shared pipe example.
// Note that we are using an idiom for focus/share that simply lists the
// location that we want to focus/share, instead of having to list types.

import abort
import println

// head node
typedef H<p> = // note the two recursions
			( rw p !(Empty#[]) => rw p !(Empty#[]) ; (H[p]) ) (+)
			( rw p (Closed#[]) => none ) (+) 
			( rw p (Node#[int,exists q.(!ref q :: (H[q]) )]) => none )

// tail node
typedef T<p> =  rw p !(Empty#[]) =>
	( (rw p !(Closed#[])) (+) (rw p (Node#[int,exists q.(!ref q :: (H[q]))])) )

let newPipe = fun( _ : [] ).
	// initial node to be shared:
	open <n,node> = new Empty#{} in
		share n as (H[n]) || (T[n]);
	open <h,head> = new <n,node :: (H[n])> in
	open <t,tail> = new <n,node :: (T[n])> in
		< rw h (exists p.(!ref p :: (H[p]))) : Consumer,
		< rw t (exists p.(!ref p :: (T[p]))) : Producer,
		{
		put = fun( e : int :: rw t (exists p.( !ref p :: (T[p]) )) ).
			open <l,last> = new Empty#{} in
				open <o,oldlast> = !tail in
					focus o;
						share l as (H[l]) || (T[l]);
						oldlast := Node#{ e , <l,last :: (H[l])> };
					defocus;
					tail := <l,last :: (T[l])>
				end
			end,
		
		close = fun( _ : [] :: rw t (exists p.(!ref p :: (T[p]) )) ).
			open <l,last> = !tail in
				delete tail;
				focus l;
					last := Closed#{};
				defocus
			end,

		tryTake = fun( _ : [] :: rw h (exists p.(!ref p :: (H[p]) )) ).
			open <f,first> = !head in
				@f
				(focus f;
				case !first of
						Empty#_ -> // still empty, no need to change anything
							first := Empty#{};
							defocus;
							head := <f,first :: (H[f])>; // reassign (content was/is linear type)
							NoResult#({}::rw h (exists p.(!ref p :: (H[p]))))
				|		Closed#_ -> // end of pipe, pipe closed
							delete first;
							delete head;
							defocus;
							Depleted#{}
				|		Node#n ->
							delete first;
							defocus; // defocus moved just to reduce elements in delta,
								// could be further below
							let [element, next] = n in
								head := next; // 'next' is a packed type
								Result#(element :: rw h (exists p.(!ref p :: (H[p]))) )
							end
				end)
			end
		}::( (rw h (exists p.(!ref p :: (H[p])))) * (rw t (exists p.(!ref p :: (T[p])))) )
		>>
	end
	end
	end
	in
	
	//
	// client code
	//
	
	let takeAll = <C>fun Rec( reader :
		![ tryTake : [] :: C -o NoResult#( [] :: C ) +
					 Depleted#[] + Result#( int :: C ) ] :: C ) : [].
		let res = reader.tryTake({}) in
			case res of
				Depleted#_ -> {} // pipe closed, done
			|	Result#res -> // ignores result
					println[int] res;
					Rec ( reader ) // not closed
			// this is an assertion error, since we are assuming that the pipe
			// was already closed when 'takeAll' is called.
			|	NoResult#_ -> abort[C] "Assertion Error: Pipe Not Closed" 
			end
		end
		in

		open <C,p> = newPipe({}) in
		open <P,pipe> = p in
			let writer = pipe in
				writer.put( 1 );
				writer.put( 2 );
				writer.close( {} )
			end;
			let reader = pipe in
				takeAll[C] ( reader ) // all pipe components exhausted
			end;
			"done!"
		end
		end
	
	end
end