
// Note that execution will obviously crash since this code contains
// and infinite loop (i.e. reaches max call stack size, due to recursion).

import add

// useful states
typedef H<t> = rw t (Held#[])
typedef F<t> = rw t (Free#int)

// sharing protocols
typedef Retry<p> = ( H[p] => H[p] ; Retry[p] ) (+) ( F[p] => none )
typedef OneUse<p> = H[p] => F[p]

// program code
open <u,meh> = new {} in

open <t,x> = new Held#{} in
	share (H[t]) as (Retry[t]) || (OneUse[t]);
	
	meh := <(OneUse[t]):What,{}::(OneUse[t])>;
	
	fun Y( _ : []::(Retry[t]) ):int.(
		use t in
			focus (H[t]),(F[t]);
			case !x of
				Held#n ->
					x := Held#n;
					defocus; // retry, did not consume shared type!
					Y {}// recursion point
			|	Free#n -> // recovers
					defocus;
					x := (add n 1);
					// ...
					x := (add !x 1);
					//...
					delete x
			end
		end
	) {};
	
	delete meh
end

end