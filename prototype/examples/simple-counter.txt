
typedef N = Z#[] + NZ#int
typedef P = NZ#int

// sharing protocols
typedef IncOnly<p> = rw p N => rw p P; IncOnly[p]
typedef Any<p> = rw p N => rw p P ; rw p P => rw p N; Any[p]

open <v,value> = new Z#{} in
	share (rw v (Z#[])) as (IncOnly[v]) || (Any[v]);

	open <Unknown,_> =
		// same trick to hide the other shared type, IncOnly[v]
		let outside = fun( _ : [] :: (IncOnly[v])).
			(<(IncOnly[v]):U,{}::(IncOnly[v])>) in
				outside({})
		end
		in
		
		// now we must work with Any[v] without being sure of
		// where it will be used
		
		focus (rw v N);
		case !value of
			Z#_ -> value := NZ#123
		| NZ#_ ->  value := NZ#123
		end;
		defocus;
		
		// here could have some code using IncOnly[v] (directly or not)
		
		focus (rw v P);
		case !value of
			NZ#b ->  value := Z#{}
		// note that no other branches are required!
		end;
		defocus
		
		// ...
	end

end
	