
import concat

// Methods, stored in a capability for 'this'
typedef R<t> = ![ name : [] :: (M[t]) -o string :: (M[t]),
                  toString : [] :: (M[t]) -o string :: (M[t]) ]
typedef M<t> = rw t (R[t])

let classAnimal = <t>fun( this : ref t ).
	{
		name = fun( _ : [] :: (M[t]) )."X",
		toString = fun( _ : [] :: (M[t]) ).(concat "Mr." (!this.name({})) )
   }
in

let classBird = <t>fun( this : ref t ).
	let super = classAnimal[t]( this ) in
	let super_toString = super.toString in // records must only contain values
	{
		// overrides
		name = fun( _ : [] :: (M[t]) ).("Bird"),
		// inherits
		toString = super_toString
	}
	end
	end

in

// client code 
open <t,this> = new {} in
	this := ( classBird[t] (this) );
	!this.toString({}) // "Mr.Bird"
end

end
end

/*
//FIXME: work in progress...
//Attempt at modeling the following Java-like code (simple, without typestates):

class Animal{ 
  String name(){ return "X"; }
  String toString(){ return "Mr."+this.name(); }
}
class Bird extends Animal {
   String name(){ return "Bird"; }
}

// client code:
(new Bird()).toString(); // "Mr.Bird"?
*/

