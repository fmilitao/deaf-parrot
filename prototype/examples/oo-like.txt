
import concat

// Methods, stored in a capability for 'this'
typedef R<t> = ![ name : [] :: (M[t]) -o string :: (M[t]),
                  toString : [] :: (M[t]) -o string :: (M[t]) ]
typedef M<t> = rw t (R[t])

let classAnimal = <t>fun( this : ref t ).
	{
		name = fun( _ : [] :: (M[t]) )."X",
		toString = fun( _ : [] :: (M[t]) ).(concat "Mr." (!this.name({})) )
   }
in

let classBird = <t>fun( this : ref t ).
	let super = classAnimal[t]( this ) in
	let super_toString = super.toString in // records must only contain values
	{
		// overrides
		name = fun( _ : [] :: (M[t]) ).("Bird"),
		// inherits
		toString = super_toString
	}
	end
	end

in

// Constructor for classBird.
// defining a generic object allocator does not appear to be possible
// due to the resulting type must be oblivious to the generic type... but
// the result must depend on the location that was created (such as M[t]).
// Therefore, some other level of "genericity" would be necessary to have
// a polymorphic object allocator function that just takes a function like
// classBird or classAnimal as argument but is still able to express that the
// result of applying those classX functions is now depending on some location.
let newBird = fun( _ : [] ).
	open <t,this> = new {} in
			this := (classBird[t] this);
			<t,this :: (M[t])>
	end
	in

// client code 
open <t,this> = newBird {} in
	!this.name({});
	!this.toString({}) // "Mr.Bird"
end

end
end
end

/*
// Study of a possible, simple, encoding of objects in our core language.
// Attempt at modeling the next Java-like code (simple, without typestates), but
// including dispatch and inheritance. No internal state, though.

class Animal{ 
  String name(){ return "X"; }
  String toString(){ return "Mr."+this.name(); }
}
class Bird extends Animal {
   String name(){ return "Bird"; }
}

// client code:
(new Bird()).toString(); // "Mr.Bird"?
*/

