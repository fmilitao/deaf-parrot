//OK {Function Value,Function Value,Function Value}
//OK ![!(Rec1 -o Rec2),!(int -o (boolean -o !!int)),!(Rec3 -o Rec3)]

typedef Rec0 = Rec1
typedef Rec1 = L#Rec1 + Q#int
typedef Rec2 = L#Rec2 + Q#int
typedef Rec3 = Rec3

{

// also folds when result is given, note that result can only
// appear if the function has a label (for recursive)
// RESULT: !(Rec1 -o Rec2)
fun Test( x : Rec1 ):Rec2 .x,

// RESULT: !(int -o boolean -o !!int)
fun A( x : int , y : boolean ) : !!int .x,

// RESULT: !(rec A.(A) -o rec A.(rec B.(A)))
fun( x : Rec3 ).x

}