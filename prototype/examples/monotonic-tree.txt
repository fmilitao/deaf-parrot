//FIXME: work in progress

typedef Nil   <q> = rw q (Nil#[])
typedef Raw   <q> = rw q (Raw#(exists l.exists r.( [ref l,ref r] :: ( (RawP[l]) * (RawP[r]) ) )))
typedef Ready <q> = rw q (Ready#(exists l.exists r.( [int,ref l,ref r] :: ( (ReadyP[l]) * (ReadyP[r]) ) )))

typedef NilP   <q> = (Nil[q]) => (Nil[q]); (NilP[q])
typedef ReadyS <q> = (Ready[q]) => (Ready[q]) ; (ReadyS[q])
typedef ReadyP <q> = (NilP[q]) (+) (ReadyS[q])
typedef RawS   <q> = (Raw[q]) => (Ready[q]) ; (ReadyS[q])
typedef RawP   <q> = (NilP[q]) (+) (ReadyP[q]) (+) (RawS[q])

// monotonic node initialization
<q>fun( v : int , n : ( ref q :: (RawP[q]) ) ).
	@q ( //FIXME issue with nested (+)'s
	focus (Raw[q]), (Ready[q]), (Nil[q]);
	case !n of
		Nil#_ -> // empty node
			n := Nil#_
	|	Ready#x -> // node was already initialized.
			// restore linear content to cell
			n := Ready#x
	| Raw#x -> // un-initialize node
		open <l,y> = x in
		open <r,pair> = y in
		let [left,right] = pair in
			// initialize children:
			init[l] v left;
			init[r] v right;
			// done
			n := Ready#<l,<r,{v,l,r}::( (ReadyP[l]) * (ReadyP[r]) )>>
		end end end
	end;
	defocus )
