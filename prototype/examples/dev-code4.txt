

typedef Cell<z,h> = ref z :: (Node[z,h])
typedef Node<z,h> = rw z (N#(exists p.(ref p :: (Cell[p,h])))) (+) rw z (E#(ref h))

// what to show?

/*
<A>fun( x : !(int -o [] :: A) ).
	( x 0;
	x 1 )
	*/

fun R<q>( x : ref q ) : ref q.
	(R[q] x)
	
	/*
fun R<X><q>( x : X ) : int.
   (R[q][q] x)
   
*/

